---
title: "assign1_kat_leigh"
author: "Kat Leigh"
date: "1/20/2021"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

# load packages

remotes::install_github("coolbutuseless/ggpattern")
library(ggpattern)
library(tidyverse)
library(lubridate)
library(broom)
library(patchwork)
library(ggfortify)
library(readxl)
library(gghighlight)
library(plotly)
library(janitor)

```
1. A graph of total mountain yellow-legged frog (Rana muscosa) count each year across all water bodies, by life stage excluding the ‘EggMass’ level. In other words, you should find the total number of adult, subadult, and tadpole yellow-legged frogs observed in the entire study region by life stage and year, but you will not use the lake ID or amphibian_location in your analyses as additional grouping variables (thanks Elmera Azadpour for clarifying). Hint: Convert the date to a date with the {lubridate} package, then pull just the year using the lubridate::year() function...then you can group by year to get counts.

```{r}
# read in data

raw_frogs<- read_excel("C:/Users/kll86/OneDrive/Documents/UCSB/esm244_assign1_kat_leigh/esm244_ass1/sierra_amphibians_esm244.xlsx") %>% 
  clean_names() %>% 
  mutate(across(where(is.character), tolower)) %>% # convert all characters to lowercase
  mutate(survey_date = ymd(survey_date)) %>% # recognize dates
  mutate(year = year(survey_date)) %>% # create a year column
  relocate(year) %>% # stick year column in front
  arrange(year) # order by year

# remove eggmass, group by year and lifestage

filter_frogs <- raw_frogs %>%
  filter(amphibian_life_stage != "EggMass",
         amphibian_species == "ramu")

summary_frogs <- filter_frogs %>%
  select(-amphibian_location, -lake_id) %>%  # remove unneeded columns
  group_by(year, amphibian_life_stage) %>% 
  summarise(count = n())

# make a plot

frog_plot <- ggplot(summary_frogs, aes(x= year, y= count))+
  geom_col(fill = "salmon")+
  facet_wrap(~amphibian_life_stage)+
  labs(title = "Total counts across all lae locations per year for each lifestage",
       x= "Year",
       y= "Count")+
  theme_minimal()

frog_plot

```
2. A column graph containing total counts (over all years of the study) of combined adult and subadult endangered mountain yellow-legged frogs (Rana muscosa) observed in the 5 lakes with the greatest total observed counts. In other words, this graph will have at least 5 columns (OK to have more if there are ties - thanks Michelle Shteyn), with Lake ID (these aren’t specified in the dataset for confidentiality) as the categorical label on one axis, and total yellow-legged frog counts (adult + subadult counts) in the dataset on the other axis. Make sure they’re in high-to-low or low-to-high order by total yellow-legged frog counts. You should exclude tadpoles for this graph. Note: Consider reformatting the lake ID from just a number to a label like “Lake 10025”), then use fct_reorder to convert it to an ordered factor.

```{r}
# get the top lakes

lakes <- filter_frogs %>%
  filter(amphibian_life_stage != "EggMass") %>% 
 group_by(lake_id) %>% 
  summarise(count = n()) %>% 
  arrange(-count) 

# top 5 counts = all lakes w/ count > 11

top_lakes <- lakes %>% 
  filter(count > 11)

# create data for graph

lake_graph_data <- filter_frogs %>% 
  filter(str_detect(amphibian_life_stage, "adult"),
         lake_id %in% top_lakes$lake_id) %>% 
  group_by(lake_id, amphibian_life_stage) %>% 
  summarise(count = n()) %>% 
  arrange(-count)

# find order of lakes

order_lakes <- filter_frogs %>% 
  filter(str_detect(amphibian_life_stage, "adult"),
         lake_id %in% top_lakes$lake_id) %>% 
  group_by(lake_id) %>% 
  summarise(count = n()) %>% 
  arrange(-count) %>%
  mutate(order = seq(1,14,1))

# apply order to graph data

lake_graph_data_ordered <- lake_graph_data %>% 
  mutate(orders = ifelse(lake_id == "50183", 1,
                         ifelse(lake_id == "70583", 2,
                                ifelse(lake_id == "10226", 3,
                                       ifelse(lake_id == "41322", 4,
                                              ifelse(lake_id == "50219", 5,
                                                     ifelse(lake_id == "10101", 6,
                                                            ifelse(lake_id == "11332", 7,
                                                                   ifelse(lake_id == "10249", 8,
                                                                          ifelse(lake_id == "10276", 9,
                                                                                 ifelse(lake_id == "10286", 10,
                                                                                        ifelse(lake_id == "10408", 11,
                                                                                               ifelse(lake_id == "50731", 12,
                                                                                                      ifelse(lake_id == "10206", 13,
                                                                                                             ifelse(lake_id == "10090", 14, 0))))))))))))))) %>% 
  #mutate(lake_id = paste("Lake", lake_id, sep=" ")) %>% removed since this makes the labels on the graph too long
  arrange(-orders)

  # graph

plot_lakes <- lake_graph_data_ordered %>% 
  ggplot(aes(x= reorder(lake_id, orders), y= count))+
  geom_col_pattern(aes(pattern_density = amphibian_life_stage, pattern_fill = as.factor(lake_id), pattern_color = as.factor(lake_id)),
                   pattern = 'stripe',
                   fill    = 'white',
                   color = 'black')+
  labs(title= str_wrap("Total counts of adults and subadults in lakes with highest frog abundance", 50),
       x= "Lake",
       y= "Count",
       pattern_density= "Life Stage",
       pattern_color= 'Lake ID Number')+
  theme_minimal()+
  theme(axis.text.x = element_blank(), plot.title = element_text(size=14), legend.box = "horizontal")+
  guides(pattern_density = "legend", pattern_fill = "none")

plot_lakes
  
```

Combine your two graphs into a single compound figure using the {patchwork} package. Add a finalized figure caption that appears below the compound figure in your knitted html. Note: You might realize once you combine your graphs into a single compound figure, you need to update the formatting (e.g. move legends or instead directly label, etc.). You should customize as necessary to make it a professional final output.

For Task 1, your knitted html should show: 

Your organized code, with clear subsections and any useful descriptive text / annotation (e.g. if you wanted to highlight this as a code example for a prospective employer)
Your finalized compound figure, with a figure caption
Make sure to suppress any messages & warnings

```{r}

combo_plots <- frog_plot / plot_lakes

combo_plot_final <- combo_plots + plot_annotation(
  title = 'Counts of mountain yellow-legged frogs (Rana muscosa) between 1995 and 2002',
  caption = str_wrap('Top plot includes all lifestages except Egg Mass, and all lake locations. Lower plot contains only adult and subadult lifestages, and only counts for lakes where Rana muscosa are most abundant (i.e. where the total count at a lake exceeded 11 individuals). Lakes are given reference ID numbers in order to preserve confidentiality.', 130))

combo_plot_final
  

```

